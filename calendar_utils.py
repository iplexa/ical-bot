import logging
import datetime
from typing import Dict, List, Optional

import icalendar
import recurring_ical_events
import aiohttp
from dateutil import tz

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ iCal –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
async def fetch_calendar(url: str) -> Optional[icalendar.Calendar]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    ical_data = await response.text()
                    return icalendar.Calendar.from_ical(ical_data)
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {response.status}")
                    return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏.
def get_events(calendar: icalendar.Calendar, start_date: datetime.datetime, end_date: datetime.datetime) -> List[Dict]:
    if not calendar:
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
    events = recurring_ical_events.of(calendar).between(start_date, end_date)
    
    formatted_events = []
    for event in events:
        start = event.get('dtstart').dt
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ datetime, –µ—Å–ª–∏ —ç—Ç–æ date
        if isinstance(start, datetime.date) and not isinstance(start, datetime.datetime):
            start = datetime.datetime.combine(start, datetime.time.min)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
        if isinstance(start, datetime.datetime) and start.tzinfo is None:
            start = start.replace(tzinfo=tz.tzutc())
            start = start.astimezone(tz.tzlocal())
        
        summary = str(event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        description = str(event.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'))
        location = str(event.get('location', '–ë–µ–∑ –º–µ—Å—Ç–∞'))
        
        formatted_events.append({
            'start': start,
            'summary': summary,
            'description': description,
            'location': location
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    return sorted(formatted_events, key=lambda x: x['start'])

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
def format_events_text(events: List[Dict]) -> str:
    if not events:
        return "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    
    text = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for event in events:
        start_time = event['start'].strftime("%d.%m.%Y %H:%M")
        text += f"üïí {start_time}\n"
        text += f"üìå {event['summary']}\n"
        
        if event['location'] != '–ë–µ–∑ –º–µ—Å—Ç–∞':
            text += f"üìç {event['location']}\n"
        
        if event['description'] != '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            description = event['description']
            if len(description) > 100:
                description = description[:97] + "..."
            text += f"‚ÑπÔ∏è {description}\n"
        
        text += "\n"
    
    return text